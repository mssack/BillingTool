// Copyright (c) 2014 - 2016 All Rights Reserved Christian Sack
// <author>Christian Sack</author>
// <email>christian@sack.at</email>
// <website>christian.sack.at</website>
// <date>2016-01-03</date>

using System;
using System.Collections.Generic;
using System.Linq;
using CsWpfBase.Ev.Public.Extensions;
using CsWpfBase.Utilitys.templates;






namespace CsWpfBase.Db.codegen.code.files
{
	/// <summary>Provides a name space wrapper around source code.</summary>
	[Serializable]
	internal class CsDbCodeNamespace : FileTemplate
	{

		private string _content;
		private string _fileComment = "********************************************************************" + "\r\n"
									+ "\r\n"
									+ "                 AUTOGENERATED CONTENT DO NOT MODIFY" + "\r\n"
									+ "                      PRODUCED BY CsWpfBase.Db" + "\r\n"
									+ "\r\n"
									+ "********************************************************************" + "\r\n"
									+ "\r\n"
									+ "\r\n"
									+ "Copyright (c) 2014 - 2016 All rights reserved Christian Sack" + "\r\n"
									+ "<author>Christian Sack</author>" + "\r\n"
									+ "<email>service.christian@sack.at</email>" + "\r\n"
									+ "<website>christian.sack.at</website>" + "\r\n"
									+ "<date>" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "</date>";



		private string _namespace;
		private List<string> _usings = new List<string>()
		{
			"System",
			"System.Data",
			"System.Diagnostics",
			"System.Linq",
			"System.Collections.Generic",
			"System.Collections.ObjectModel",
			"System.Windows",
			"System.Windows.Markup",
			"CsWpfBase.Ev.Public.Extensions",
			"CsWpfBase.Db.attributes",
			"CsWpfBase.Db.attributes.columnAttributes",
			"CsWpfBase.Db.models",
			"CsWpfBase.Db.models.helper",
			"CsWpfBase.Db.models.bases",
			"CsWpfBase.Db.router",
		};




		/// <summary>Gets or sets the FileComment.</summary>
		public string FileComment
		{
			get { return _fileComment; }
			set { SetProperty(ref _fileComment, value); }
		}
		/// <summary>Gets or sets the Usings.</summary>
		public List<string> Usings
		{
			get { return _usings ?? (_usings = new List<string>()); }
			set { SetProperty(ref _usings, value); }
		}
		/// <summary>Gets or sets the Namespace.</summary>
		[Key]
		public string Namespace
		{
			get { return _namespace; }
			set { SetProperty(ref _namespace, value); }
		}
		/// <summary>The Content inside of the namespace.</summary>
		[Key]
		public string Content
		{
			get { return _content; }
			set { SetProperty(ref _content, value); }
		}
		[Key(Name = "Usings")]
		private string TmpUsings => Usings == null ? "" : Usings.Select(x => "using " + x + ";").Join("\r\n");
		[Key(Name = "FileComment", ValueSuffix = "\r\n\r\n\r\n\r\n")]
		private string TmpFileComment => "//" + FileComment.Replace("\r\n", "\r\n//");
	}
}